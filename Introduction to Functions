                                                                          DEFINING A FUNCTION

1. First, define a function, directions_to_timesSq(). Leave the body of the function empty for now.
//
def directions_to_timesSq():

                                                                          CALLING A FUNCTION

2. Within the body of the function, use three print() statements to output the following directions and call out the function:
- Walk 4 mins to 34th St Herald Square train station
- Take the Northbound N, Q, R, or W train 1 stop
- Get off the Times Square 42nd Street stop
//
def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station")
  print("Take the Northbound N, Q, R, or W train 1 stop")
  print("Get off the Times Square 42nd Street stop")
directions_to_timesSq()

                                                                          WHITESPACE & EXECUTION FLOW

3.1 Write a print() statement that will output Checking the weather for you!
//
print("Checking the weather for you!")

3.2 Write a function called weather_check() that will print a message to our users that itâ€™s a great day to travel! The function should output:
//
def weather_check():
  print("Looks great outside! Enjoy your trip.")

3.3 In our weather_check() function add a second print() statement under the first one which prints a warning message for our travelers! It should print:
"False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside."
//
def weather_check():
  print("Looks great outside! Enjoy your trip.")
  print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")

3.4 Call the function weather_check().
//
def weather_check():
  print("Looks great outside! Enjoy your trip.")
  print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")
weather_check()

3.5 Unindent your final print statement in your weather_check() function. Run the program again. What is different?
//
def weather_check():
  print("Looks great outside! Enjoy your trip.")
print("False Alarm, the weather changed! There is a thunderstorm approaching. Cancel your plans and stay inside.")
weather_check()

                                                                          PARAMETERS & ARGUMENTS

4.1 Create a function called generate_trip_instructions() that defines one parameter called location.
//
def generate_trip_instructions(location):

4.2 generate_trip_instructions() should print out the following: "Looks like you are planning a trip to visit <location>"
Where <location> will represent the location parameter.
//
def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)

4.3 Letâ€™s have generate_trip_instructions()also print out the following on a new line: "You can use the public subway system to get to <location>"
Where <location> will represent the location parameter.
//
def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)
  print("You can use the public subway system to get to " + location)

4.4 Time for some greenery! Letâ€™s see what happens when we call the function and input the argument "Central Park", a backyard wonder in the heart of New York City.
//
def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)
  print("You can use the public subway system to get to " + location)
generate_trip_instructions("Central Park")

4.5 The day trip is over and we need to get back to the train station to head home. Change the argument to "Grand Central Station" and call the function again.
What changed in the output?
//
def generate_trip_instructions(location):
  print("Looks like you are planning a trip to visit " + location)
  print("You can use the public subway system to get to " + location)
generate_trip_instructions("Grand Central Station")

                                                                          MULTIPLE PARAMETERS

5.1 Our travel application users want to calculate the total expenses they may have to incur on a trip.

Write a function called calculate_expenses that will have four parameters (in exact order):
    plane_ticket_price
    car_rental_rate
    hotel_rate
    trip_time
Each of these parameters will account for a different expense that our users will incur.
//
def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):

5.2 Within the body of the function, letâ€™s start to make some calculations for our expenses. First, letâ€™s calculate the total price for a car rental.
Create new variable called car_rental_total that is the product of car_rental_rate and trip_time.
//
def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total=car_rental_rate*trip_time

5.3 Next, we want to apply the same logic but for our hotel_rate. Create new variable called hotel_total that is the product of hotel_rate and trip_time.
We also have a coupon to give our users some cashback for their hotel visit so subtract 10 from that total in the same statement. Woohoo, coupons! ðŸ’µ
//
def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total=car_rental_rate*trip_time
  hotel_total=hotel_rate*trip_time-10

5.4 Lastly, letâ€™s print a nice message for our users to see the total. Use print() to output the sum of car_rental_total, hotel_total, and plane_ticket_price.
//
def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total=car_rental_rate*trip_time
  hotel_total=hotel_rate*trip_time-10
  print(car_rental_total + hotel_total + plane_ticket_price)

5.5 Call your function with the following argument values for the parameters listed:
      plane_ticket_price : 200
      car_rental_rate : 100
      hotel_rate : 100
      trip_time: 5
//
def calculate_expenses(plane_ticket_price, car_rental_rate, hotel_rate, trip_time):
  car_rental_total=car_rental_rate*trip_time
  hotel_total=hotel_rate*trip_time-10
  print(car_rental_total + hotel_total + plane_ticket_price)
calculate_expenses(200, 100, 100, 5)

                                                                          TYPES OF ARGUMENTS

6.1 Tripcademy (our trusty travel app) needs to allow passengers to plan a trip (duh). 
Write a function called trip_planner() that will have three parameters: first_destination, second_destination and final_destination.
Give the final_destination parameter a default value of "Codecademy HQ".
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):

6.2 First, we want to introduce the trip to users. Use print() in our function to output Here is what your trip will look like!.
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")

6.3 In our function definition letâ€™s provide an itinerary that will describe the destinations our user will visit in order. Print a statement that follows this form:
First, we will stop in <first_destination>, then <second_destination>, and lastly <final_destination>
An example call to our function using positional arguments:
      trip_planner("London", "India", "New Zealand")
Should output:
      Here is what your trip will look like!
      First, we will stop in London, then India, and lastly New Zealand
To test out your function, call trip_planner() with the following values for the parameters:
      first_destination: "France"
      second_destination: "Germany"
      final_destination: "Denmark"
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")
  print("First, we will stop in "+ first_destination + ", then " + second_destination + ", and lastly " + final_destination)
trip_planner("France", "Germany", "Denmark")

6.4 Call the function trip_planner() again with the following values for the parameters:
      first_destination: "Denmark"
      second_destination: "France"
      final_destination: "Germany"
Note the difference in your output depending on the position of your arguments.
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")
  print("First, we will stop in "+ first_destination + ", then " + second_destination + ", and lastly " + final_destination)
trip_planner("France", "Germany", "Denmark")
trip_planner("Denmark", "France", "Germany")

6.5 Call the function trip_planner() again but this time include the keyword arguments (e.g. first_destination) and put them in this exact order:
      first_destination = "Iceland"
      final_destination = "Germany"
      second_destination = "India"
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")
  print("First, we will stop in "+ first_destination + ", then " + second_destination + ", and lastly " + final_destination)
trip_planner("France", "Germany", "Denmark")
trip_planner("Denmark", "France", "Germany")
trip_planner(first_destination = "Iceland", final_destination = "Germany", second_destination = "India")

6.6. Lastly, go ahead and call the function trip_planner() using only two positional arguments to see the default argument in action:
      first_destination: "Brooklyn"
      second_destination: "Queens"
//
def trip_planner(first_destination, second_destination, final_destination="Codecademy HQ"):
  print("Here is what your trip will look like!")
  print("First, we will stop in "+ first_destination + ", then " + second_destination + ", and lastly " + final_destination)
trip_planner("France", "Germany", "Denmark")
trip_planner("Denmark", "France", "Germany")
trip_planner(first_destination = "Iceland", final_destination = "Germany", second_destination = "India")
trip_planner("Brooklyn", "Queens")

                                                                          BUILT-IN FUNCTIONS vs USER DEFINED FUNCTIONS

7.1 We were provided a list of prices for some gift shop items:
      T-shirt: 9.75
      Shorts: 15.50
      Mug: 5.99
      Poster: 2.00
Create a variable called max_price and call the built-in function max() with the variables of prices to get the maximum price.
Print max_price.
//
max_price = max(tshirt_price, shorts_price, mug_price, poster_price)
print(max_price)

7.2 Using the same set of prices, create a new variable called min_price and use the built-in function min() with the variables of prices to get the minimum price.
Print min_price.
//
min_price = min(tshirt_price, shorts_price, mug_price, poster_price)
print(min_price)

7.3 Use the built-in function round() to round the price of the variable tshirt_price by one decimal place.
Save the result to a variable called rounded_price and print it.
//
rounded_price = round(tshirt_price, 1)
print(rounded_price)

                                                                          VARIABLE ACCESS

8.1 Our users want to be able to save a list of their favorite places in our travel application. We have received a rough draft for this implementation from another coder, 
but there are some problems with variable scope which prevent it from working properly.Take a second to understand what the program is doing and then hit Run the code to see the error.
      # This function will print a hardcoded count of how many locations we have.
      def print_count_locations():
        favorite_locations = "Paris, Norway, Iceland"
        print("There are 3 locations")    
      # This function will print the favorite locations
      def show_favorite_locations():
        print("Your favorite locations are: " + favorite_locations)
      print_count_locations()
      show_favorite_locations()

8.2 Looking at the error, it seems like the main issue is that favorite_locations is not defined. Why would our program not be able to see our beautiful favorite_locations variable?
Aha! It must be a scope issue. Fix the scope of favorite_locations so that both our functions can access it.
//
def print_count_locations():
  favorite_locations = "Paris, Norway, Iceland"
  print("There are 3 locations")
def show_favorite_locations():
  favorite_locations = "Paris, Norway, Iceland"
  print("Your favorite locations are: " + favorite_locations)
print_count_locations()
show_favorite_locations()

                                                                          RETURNS

9.1 Our travel application is getting really popular. Some of our users have posted on social media that it would be useful if our application could help them track their budget during trips. 
We want to help them track their starting budget and let them know how much they have left after an expense.
We have provided some starting code to get started. Take a second to understand the code and then click Run and take a look at the output.
      current_budget = 3500.75
      def print_remaining_budget(budget):
        print("Your remaining budget is: $" + str(budget))
      print_remaining_budget(current_budget)

9.2 Letâ€™s create a new function called deduct_expense() that will take two parameters.
The first parameter will be budget and the second parameter will be expense. Our function will be taking in a budget value as well as the expense we want to subtract.
We will want our function to return the budget minus the expense our travelers are incurring.
//
def deduct_expense(budget, expense):
  return budget-expense

9.3 Looks like the most common expense our travelers are incurring is a t-shirt purchase.
Letâ€™s create a variable called shirt_expense and for now, we will give it a set value of 9 (We are not accounting for currency changes at the moment). 
Make sure this is defined outside of the functions in your script.
//
shirt_expense = 9

9.4 Now that we have an expense to subtract, create a new variable called new_budget_after_shirt and set it to be the function call of deduct_expense().
Pass our current_budget variable as the first argument and the shirt_expense variable as the second argument.
//
def deduct_expense(budget, expense):
  return budget-expense
shirt_expense=9
new_budget_after_shirt = deduct_expense(current_budget, shirt_expense)

9.5 Lastly, we want our users to see the remaining budget.
Call the provided print_remaining_budget() function, passing in new_budget_after_shirt as the only argument.
//
def deduct_expense(budget, expense):
  return budget-expense
shirt_expense=9
new_budget_after_shirt = deduct_expense(current_budget, shirt_expense)
print_remaining_budget(new_budget_after_shirt)

                                                                          MULTIPLE RETURNS

10.1 Our users liked the previous functionality that we added to our travel application, but recently we have had an influx of users planning trips in Italy. 
We want to create a small function to output the top places to visit in Italy. Another member of our team already started on the implementation of this feature 
but it is still missing a few key details. Take a second to review the code and click Run when you are ready to move on. For now, there will be no output.
   def top_tourist_locations_italy():
     first = "Rome"
     second = "Venice"
     third = "Florence"


10.2 We want to be able to return the three most popular destinations from our function top_tourist_locations_italy().
Add a line in the function top_tourist_locations_italy() that will return the values of first, second, third in that exact order.
//
def top_tourist_locations_italy():
  first = "Rome"
  second = "Venice"
  third = "Florence"
  return first, second, third

10.3 In order to use our three returned values from top_tourist_locations_italy() we need to assign them to new variables names after we call our function.
Set the return of the function top_tourist_locations_italy() to be equal to three new variables called most_popular1, most_popular2, and most_popular3 in that exact order.
//
def top_tourist_locations_italy():
  first = "Rome"
  second = "Venice"
  third = "Florence"
  return first, second, third 
most_popular1, most_popular2, most_popular3 = top_tourist_locations_italy()

10.4 Use three print() statements to output the value of most_popular1, most_popular2, and most_popular3.
//
def top_tourist_locations_italy():
  first = "Rome"
  second = "Venice"
  third = "Florence"
  return first, second, third 
most_popular1, most_popular2, most_popular3 = top_tourist_locations_italy()
print(most_popular1)
print(most_popular2)
print(most_popular3)

                                                                          REVIEW

11.1 Alright, this is it. We are going to use all of our knowledge of functions to build out TripPlanner V1.0.
First, like in our previous exercises, we want to make sure to welcome our users to the application.
Create a function called trip_planner_welcome() that takes one parameter called name. The function should use print() to output a message like this:
Welcome to tripplanner v1.0 <Name Here>
Where <Name Here> represents the parameter variable of name we defined.
Call trip_planner_welcome(), passing your name as an argument.
//
ef trip_planner_welcome(name):
  print("Welcome to tripplanner v1.0 "+name)
trip_planner_welcome("WooHoo!!!")

11.2 Next, we are going to define a function called estimated_time_rounded() that will allow us to calculate a rounded time value based on a decimal for our userâ€™s trip.
An example call for this function will look like this:
estimated_time_rounded(2.5)
Where 2 represents 2 hours and .5 represents 30 minutes.
Define the function estimated_time_rounded() with a single parameter estimated_time. The function should do two things:
Create a variable called rounded_time that is the result of calling the round() built-in function on the parameter estimated_time.
Return rounded_time.
After the function definition, call estimated_time_rounded() with a decimal argument and save the result to a variable called estimate. 
Since this amount represents a time, be sure to use a positive number.
//
ef trip_planner_welcome(name):
  print("Welcome to tripplanner v1.0 "+name)
trip_planner_welcome("WooHoo!!!")
def estimated_time_rounded(estimated_time):
  rounded_time=round(estimated_time)
  return rounded_time
estimate=estimated_time_rounded(2.5)

11.3 Next, we are going to generate messages for a userâ€™s planned trip.
Create a function called destination_setup() that will have four parameters in this exact order:
      origin
      destination
      estimated_time
      mode_of_transport
Give the parameter mode_of_transport a default value of "Car". The program will error out if we run it since we have not defined a function body yet. 
Donâ€™t worry we will do that in the next step.
//
def trip_planner_welcome(name):
  print("Welcome to tripplanner v1.0 "+name)
trip_planner_welcome("WooHoo!!!")
def estimated_time_rounded(estimated_time):
  rounded_time=round(estimated_time)
  return rounded_time
estimate=estimated_time_rounded(2.5)
def destination_setup(origin, destination, estimated_time, mode_of_transport="Car"):

11.4 Next, we are going to write four print() statements in our function. The output on this function call should look like this:
      Your trip starts off in <origin>
      And you are traveling to <destination>
      You will be traveling by <mode_of_transport>
      It will take approximately <estimated_time> hours
Each of these print() statements use a different parameter from our function destination_setup().
Note: The estimated_time parameter will come in the form of an integer. Make sure to use str() to convert the parameter in your print statement.
After the function definition, call destination_setup() with the following arguments:
  -  origin and destination should be string values representing the places you will travel from and to
  -  Use the estimate you created earlier for estimated_time
  -  If you will be traveling by a mode other than Car, be sure to overwrite the default value of mode_of_transport
//
def trip_planner_welcome(name):
  print("Welcome to tripplanner v1.0 " + name)
trip_planner_welcome("WooHoo!!!")
def estimated_time_rounded(estimated_time):
  rounded_time = round(estimated_time)
  return rounded_time
estimate = estimated_time_rounded(2.56)
def destination_setup(origin, destination, estimated_time, mode_of_transport="Car"):
  print("Your trip starts off in " + origin)
  print("And you are traveling to " + destination)
  print("You will be traveling by " + mode_of_transport)
  print("It will take approximately " + str(estimated_time) + " hours")
destination_setup("Vilnius", "NYC", estimate, "Plane")
